module Tag where

------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------

data TagClass = TagClass
  { tc_name  :: String
  , tc_arity :: Arity
  , tc_env   :: Environment
  }
  deriving (Show)

data Arity
  = ArityI Int
  | ArityS
  deriving (Show)

check_arity :: Arity -> Int -> Bool
check_arity arity n = case arity of
  ArityI n' -> n == n'
  ArityS    -> True

data Environment = Environment
  { env_is_container :: Bool
  , env_is_verbatim  :: Bool
  }
  deriving (Show)

------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------

data Tag = Tag
  { t_tagclass :: TagClass
  , t_args     :: [String]
  }
  deriving (Show)


------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
